name: Code to Production Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - Release v*.*.*.*
  push:
    tags:
      - 'v*' #v*.*.*.*

  workflow_dispatch:
    inputs:
      environment:
        description: 'Re-Run Action'
        required: true
        default: 'Re-run Action'
        type: choice
        options:
          - Re-Run Action

jobs:
  label_and_notify:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version:
          - 22.2.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.2.0
  
        if: ${{ ! startsWith(github.ref, 'refs/tags/' || github.ref_name == 'main') }}

      - name: Set up Email Credentials
        run: |
          #echo "email_username=${{ secrets.EMAIL_USERNAME }}" >> $GITHUB_ENV
          echo "email_password=${{ secrets.EMAIL_PASSWORD }}" >> $GITHUB_ENV  
          echo ${{ secrets.EMAIL_USERNAME }} | sed 's/./& /g'
      
  build_code: 
     needs: label_and_notify
     uses: ./.github/workflows/build.yml 
  
  create_release:
    runs-on: ubuntu-latest
    needs: build_code
    permissions:
      actions: write
      attestations: write
      checks: write
      contents: write
      deployments: write
      discussions: write
      issues: write
      pages: write
      packages: write
      pull-requests: write
      repository-projects: write
      security-events: write
      statuses: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2 

      - name: Extract PR Description
        id: extract_pr_description
        if: github.event_name == 'pull_request'
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PR_DESCRIPTION=$(gh pr view $PR_NUMBER --json body --jq .body)
          echo "PR_DESCRIPTION=$PR_DESCRIPTION" >> $GITHUB_ENV

      - name: Extract Version Number
        id: extract_version_number
        if: github.event_name == 'pull_request'
        run: |
          VERSION_NUMBER=$(echo "${{ env.PR_DESCRIPTION }}" | grep -oP 'Tag: \K[^\s]+')
          echo $VERSION_NUMBER
          echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_ENV

      - name: Validate Version Number
        if: github.event_name == 'pull_request'
        run: |
          if [[ ! "${{ env.VERSION_NUMBER }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+[a-zA-Z]?$ ]]; then
            echo "Invalid version number format. Expected format: vMAJOR.MINOR.PATCH[optional alphabet character]"
            exit 1
          fi    
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.event_name == 'pull_request' && env.VERSION_NUMBER || github.ref_name }}
          release_name: Release ${{ github.event_name == 'pull_request' && env.VERSION_NUMBER || github.ref_name }}
          draft: false
          prerelease: false

      - name: Send email notification on release
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'CM: NARA Project Release Ready for Ops Deploy - PROD'
          body: 'A NARA Project Release is ready for Ops Deployment to PROD environment: ${{ steps.create_release.outputs.html_url }}'
          to: ${{ secrets.EMAIL_USERNAME }}, derick.williams1@nara.gov, janice.cobb@nara.gov, seema.dheman@nara.gov, Sherli.Nambiar@nara.gov, Chandni.Bedi@nara.gov
          from: QA_configmgt@nara.gov #${{ secrets.EMAIL_USERNAME }}, #janice.cobb@nara.gov, #seema.dheman@nara.gov
